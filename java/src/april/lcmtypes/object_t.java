/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package april.lcmtypes;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class object_t implements lcm.lcm.LCMEncodable
{
    public int id;
    public long utime;
    public double xyzrpy[];
    public double transformation[][];
 
    public object_t()
    {
        xyzrpy = new double[6];
        transformation = new double[4][4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf50671671db5bc71L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(april.lcmtypes.object_t.class))
            return 0L;
 
        classes.add(april.lcmtypes.object_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.id); 
 
        outs.writeLong(this.utime); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.xyzrpy[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                outs.writeDouble(this.transformation[a][b]); 
            }
        }
 
    }
 
    public object_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public object_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static april.lcmtypes.object_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        april.lcmtypes.object_t o = new april.lcmtypes.object_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.id = ins.readInt();
 
        this.utime = ins.readLong();
 
        this.xyzrpy = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.xyzrpy[a] = ins.readDouble();
        }
 
        this.transformation = new double[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                this.transformation[a][b] = ins.readDouble();
            }
        }
 
    }
 
    public april.lcmtypes.object_t copy()
    {
        april.lcmtypes.object_t outobj = new april.lcmtypes.object_t();
        outobj.id = this.id;
 
        outobj.utime = this.utime;
 
        outobj.xyzrpy = new double[(int) 6];
        System.arraycopy(this.xyzrpy, 0, outobj.xyzrpy, 0, 6); 
        outobj.transformation = new double[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            System.arraycopy(this.transformation[a], 0, outobj.transformation[a], 0, 4);        }
 
        return outobj;
    }
 
}

